---
- name: Import common vars
  ansible.builtin.include_vars:
    file: ../group_vars.yml

- name: Lookup Root Resource Pool ID
  ansible.builtin.set_fact:
    vcenter_rp_id: >-
      {{ lookup('vmware.vmware_rest.resource_pool_moid', '/' + vcenter_datacenter + '/' + vcenter_cluster_name + '/' + vcenter_resource_pool,
      vcenter_hostname=vcenter_hostname,
      vcenter_username=vcenter_username,
      vcenter_password=vcenter_password,
      vcenter_validate_certs=false,
      ) }}

- name: Test
  block:
    - name: Create a test resource pool
      vmware.vmware_rest.vcenter_resourcepool:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: false
        name: "{{ test_resource_pool }}"
        parent: "{{ vcenter_rp_id }}"
      register: _test_rp

    - name: Gather Library Item Info
      vmware.vmware.content_library_item_info:
        validate_certs: false
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        library_item_name: "{{ esxi_content_library_template }}"
        library_name: "{{ ci_resources_content_library }}"
      register: _template

    - name: Deploy Virtual ESXi Host
      vmware.vmware_rest.vcenter_ovf_libraryitem:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: false
        ovf_library_item_id: "{{ (_template.library_item_info | first).id }}"
        session_timeout: 10000
        state: deploy
        target:
          resource_pool_id: "{{ _test_rp.id }}"
        deployment_spec:
          name: "{{ test_esxi_hostname }}"
          accept_all_EULA: true
          storage_provisioning: thin
      register: _deploy

    - name: Power On Host
      vmware.vmware_rest.vcenter_vm_power:
        state: start
        vm: "{{ _deploy.value.resource_id.id }}"
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: false

    - name: Wait For ESXi Host To Have IP
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        name: "{{ test_esxi_hostname }}"
      register: _esxi_info
      until: _esxi_info.guests[0].ipv4 is defined and _esxi_info.guests[0].ipv4
      retries: 15
      delay: 5

    - name: Pause for 15 seconds to ensure host is ready
      ansible.builtin.pause:
        seconds: 15

    - name: Join Hosts To Cluster
      vmware.vmware.esxi_host:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        cluster: "{{ test_cluster }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        esxi_username: "{{ test_esxi_username }}"
        esxi_password: "{{ test_esxi_password }}"
        state: present

    - name: Disconnect Host
      vmware.vmware.esxi_connection:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: disconnected

    - name: Connect Host
      vmware.vmware.esxi_connection:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: connected
      register: _conn

    - name: Connect Host - Idempotence
      vmware.vmware.esxi_connection:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: connected
      register: _conn_idem

    - name: Disconnect Host
      vmware.vmware.esxi_connection:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: disconnected
      register: _disconn

    - name: Disconnect Host - Idempotence
      vmware.vmware.esxi_connection:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: disconnected
      register: _disconn_idem

    - name: Check Output
      ansible.builtin.assert:
        that:
          - _conn is changed
          - _conn_idem is not changed
          - _disconn is changed
          - _disconn_idem is not changed

  always:
    - name: Remove Host From vCenter
      vmware.vmware.esxi_host:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        datacenter: "{{ vcenter_datacenter }}"
        esxi_host_name: "{{ _esxi_info.guests[0].ipv4 }}"
        state: absent
      when: _esxi_info.guests[0] is defined
    - name: "Test cleanup: Delete Virtual ESXi Host"
      community.vmware.vmware_guest:
        validate_certs: false
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        cluster: "{{ vcenter_cluster_name }}"
        datacenter: "{{ vcenter_datacenter }}"
        folder: ""
        state: absent
        name: "{{ test_esxi_hostname }}"
        force: true
    - name: "Test cleanup: Delete Resource Pool"
      vmware.vmware_rest.vcenter_resourcepool:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: false
        resource_pool: "{{ _test_rp.id }}"
        state: absent
      when: _test_rp.id is defined
