---
- block:
    - name: Import common vars
      ansible.builtin.include_vars:
        file: ../group_vars.yml
      when: not run_on_simulator

    - name: Create Virtual Machine From OVF Template
      vmware.vmware.deploy_content_library_ovf:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        library_item_name: "{{ rhel9_content_library_ovf }}"
        vm_name: "{{ vm }}"
        datacenter: "{{ vm_datacenter }}"
        datastore: "{{ datastore }}"
        cluster: "{{ vm_cluster }}"

    - name: Create a snapshot
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap1
        description: snap1_description
        validate_certs: false
      register: _create

    - name: Create a snapshot - Idempotence
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap1
        description: snap1_description
        validate_certs: false
      register: _create_idem

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify snapshot created
      ansible.builtin.assert:
        that:
          - snapshot_info.name == 'snap1'
          - snapshot_info.name == _create.snapshot.name
          - snapshot_info.id == _create.snapshot.id
          - snapshot_info.description == 'snap1_description'
          - _create_idem is not changed
      vars:
        snapshot_info: "{{ info.guests[0].snapshots[0] }}"

    - name: Rename Snapshot
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap1
        description: snap1_description
        validate_certs: false
        new_snapshot_name: new_name1
      register: _rename

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify snapshot renamed
      ansible.builtin.assert:
        that:
          - snapshot_info.name == 'new_name1'
      vars:
        snapshot_info: "{{ info.guests[0].snapshots[0] }}"

    - name: Take a second snap with more options
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap02
        quiesce: true
        memory_dump: true
        validate_certs: false

    - name: Take even more snaps
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap0{{ item }}
        validate_certs: false
      loop:
        - 3
        - 4
        - 5
        - 6

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify snapshot length
      ansible.builtin.assert:
        that:
          - info.guests[0].snapshots | length == 6

    - name: Remove a single snapshot
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: absent
        snapshot_name: snap06
        validate_certs: false
      register: _rm_single

    - name: Remove a snapshot - Idemptoence
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: absent
        snapshot_name: snap06
        validate_certs: false
      register: _rm_single_idem

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify snapshot length
      ansible.builtin.assert:
        that:
          - info.guests[0].snapshots | length == 5
          - _rm_single_idem is not changed

    - name: Remove a snapshot and snapshot subtree
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: absent
        remove_children: true
        snapshot_name: snap04
        validate_certs: false

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify snapshot length
      ansible.builtin.assert:
        that:
          - info.guests[0].snapshots | length == 3
          - _rm_single_idem is not changed

    - name: Remove all snapshots of a VM
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: absent
        remove_all: True
        validate_certs: false

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify all snapshots removed
      ansible.builtin.assert:
        that:
          - info.guests[0].snapshots | length == 0

    - name: Create a snapshot
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        state: present
        snapshot_name: snap1
        description: snap1_description
        validate_certs: false
      register: _create

    - name: Remove a snapshot with a snapshot id
      vmware.vmware.vm_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ vm_datacenter }}"
        folder: "/{{ vm_datacenter }}/vm/"
        name: "{{ vm }}"
        snapshot_id: "{{ _create.snapshot.id }}"
        state: absent
        validate_certs: false

    - name: Gather some info from vm
      vmware.vmware.guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ vm }}"
        validate_certs: false
      register: info

    - name: Verify all snapshots removed
      ansible.builtin.assert:
        that:
          - info.guests[0].snapshots | length == 0

  always:
    - name: "Test teardown: Destroy VM guest {{ vm }}"
      community.vmware.vmware_guest:
        validate_certs: false
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        cluster: "{{ vm_cluster }}"
        datacenter: "{{ vm_datacenter }}"
        state: absent
        force: true
        name: "{{ vm }}"
