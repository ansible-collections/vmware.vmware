- import_role:
    name: prepare_vmware_tests
  vars:
    setup_attach_host: true
    setup_datastore: true
    setup_virtualmachines: true

# Test0001: Try to delete the non-existent snapshot
- name: 0001 - Delete non-existent snapshot
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: absent
    snapshot_name: snap_a

# Test0002: Create two snapshots
- name: 0002 - Create snapshot
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: "snap_{{item}}"
    description: "snap named {{item}}"
  with_items:
    - a
    - b

# Test0003: Reanme a to c
- name: 0003 - Rename snapshot
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: snap_a
    new_snapshot_name: snap_c

# Test0004: Create snap_a again
- name: 0004 - Re-create snapshot a
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: snap_a
    description: "snap named a"

# Test0005: Change description of snap_c
- name: 0005 - Change description of snap_c
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: snap_c
    new_description: "renamed to snap_c from snap_a"

# Test0006: Delete snap_b with child remove
- name: 0006 - Delete snap_b with child remove
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: absent
    snapshot_name: snap_b
    remove_children: true

# Test0007: Delete all snapshots
- name: 0007 - Delete all snapshots
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: remove_all

# Test0008: Create snap_a again and revert to it
- name: 0008 - Re-create snapshot a
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: snap_a
    description: "snap named a"

- name: 0008 - Revert to snap_a
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: revert
    snapshot_name: snap_a

# Test0009: Create snap_a and check in result
- name: 0009 - create snapshot a
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: snap_a
    description: "snap named a"
  register: snapshot_details

- ansible.builtin.debug: var=snapshot_details

- name: Check if snapshot details available or not
  ansible.builtin.assert:
    that:
        - "snapshot_details['msg'] == 'Snapshot named [snap_a] already exists and is current.'"

# Test0011: Failure sceanrios - when name and UUID is not specified
- name: 0011 - name and UUID is missing
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    state: present
    snapshot_name: snap_a
    description: "snap named a"
  register: snapshot_failure_details
  ignore_errors: true

- name: Check if error is shown
  ansible.builtin.assert:
    that:
        - "'one of the following is required: name, uuid' in snapshot_failure_details['msg']"
        - "snapshot_failure_details.changed == false"

# Test0010 : Test for revert and remove a snapshot to specify snapshot_id
- name: 0012 - Create snapshot
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: present
    snapshot_name: "snap_{{item}}"
    description: "snap named {{item}}"
  with_items:
    - b
    - c
  register: snapshot_creation_result0012

- name: Create the snapshot_ids variable
  ansible.builtin.set_fact:
    snapshot_ids: >-
      {{ snapshot_ids | default([])
        + [({
              'name': item.snapshot_results.current_snapshot.name,
              'snapshot_id': item.snapshot_results.current_snapshot.id
            })]
      }}
  loop: "{{ snapshot_creation_result0012.results }}"

- name: 0013 - Revert to snap_b with snapshot_id
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: revert
    snapshot_id: "{{ item.snapshot_id }}"
  loop: "{{ snapshot_ids }}"
  when:
    - item.name == "snap_b"
  register: revert_snapshot_with_id_result

- name: Make sure whether reverted with snapshot_id
  ansible.builtin.assert:
    that:
      - item.changed is sameas true
  loop: "{{ revert_snapshot_with_id_result.results }}"
  when:
    - item.item.name == "snap_b"

- name: 0014 - Remove snap_b with snapshot_id
  community.vmware.vmware_guest_snapshot:
    validate_certs: false
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: "{{ dc1 }}"
    name: "{{ virtual_machines[0].name }}"
    folder: "{{ virtual_machines[0].folder }}"
    state: absent
    snapshot_id: "{{ item.snapshot_id }}"
  loop: "{{ snapshot_ids }}"
  when:
    - item.name == "snap_b"
  register: remove_snapshot_with_id_result

- name: Make sure whether removed with snapshot_id
  ansible.builtin.assert:
    that:
      - item.changed is sameas true
  loop: "{{ remove_snapshot_with_id_result.results }}"
  when:
    - item.item.name == "snap_b"
